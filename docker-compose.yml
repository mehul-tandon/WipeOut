version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wipeout-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://secure_wiper:secure_password@postgres:5432/secure_wiper
      - JWT_SECRET=your_jwt_secret_key_here
      - ENCRYPTION_KEY=your_32_character_encryption_key
      - API_RATE_LIMIT=100
      - CERT_ISSUER_NAME=Secure Data Solutions
      - LOG_LEVEL=info
    volumes:
      - ./certificates:/app/certificates
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - wipeout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (served by backend in production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wipeout-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - frontend-build:/app/build
    networks:
      - wipeout-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wipeout-postgres
    environment:
      - POSTGRES_DB=secure_wiper
      - POSTGRES_USER=secure_wiper
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wipeout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secure_wiper -d secure_wiper"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    container_name: wipeout-redis
    command: redis-server --appendonly yes --requirepass secure_redis_password
    volumes:
      - redis-data:/data
    networks:
      - wipeout-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wipeout-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend-build:/usr/share/nginx/html
      - ./downloads:/usr/share/nginx/html/downloads
    depends_on:
      - backend
      - frontend
    networks:
      - wipeout-network
    restart: unless-stopped

  # Log Management (Optional)
  logrotate:
    image: linkyard/docker-logrotate
    container_name: wipeout-logrotate
    volumes:
      - ./logs:/logs
      - ./logrotate.conf:/etc/logrotate.conf
    networks:
      - wipeout-network
    restart: unless-stopped

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wipeout-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wipeout-network
    restart: unless-stopped

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wipeout-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - wipeout-network
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  frontend-build:
    driver: local

networks:
  wipeout-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
